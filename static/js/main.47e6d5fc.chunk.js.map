{"version":3,"sources":["utils/BooksAPI.js","components/shelfChanger.js","components/bookShelf.js","components/ListBooks.js","components/SearchBooks.js","components/App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","then","res","json","data","books","update","book","shelf","id","method","body","JSON","stringify","search","query","ShelfChanger","changeShelve","className","value","onChange","disabled","BookShelf","shelves","getAllBooks","map","index","key","shelfName","style","width","height","backgroundImage","imageLinks","thumbnail","title","authors","length","author","ListBooks","to","SearchBooks","searchBookList","searchBook","onClick","type","placeholder","e","target","autoFocus","element","find","BooksApp","state","a","BooksAPI","setState","catch","err","console","error","event","persist","prevState","filter","bookItem","concat","this","exact","path","render","React","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.47e6d5fc.chunk.js","sourcesContent":["const api = 'https://reactnd-books-api.udacity.com';\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token;\nif (!token)\n  token = localStorage.token = Math.random()\n    .toString(36)\n    .substr(-8);\n\nconst headers = {\n  Accept: 'application/json',\n  Authorization: token\n};\n\nexport const get = bookId =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json());\n\nexport const search = query =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  })\n    .then(res => res.json())\n    .then(data => data.books);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @description This represents the options for changing the shelves\n * @constructor\n * @param {object} book - this contain the data about the book\n * @param {string} shelf - Contain the name of the shelf\n * @param {function} changeShelve - this function is used to change the shelve of the book\n */\n\nconst ShelfChanger = ({ shelf, book, changeShelve }) => (\n  <div className='book-shelf-changer'>\n    <select value={shelf} onChange={changeShelve(book)}>\n      <option value='move' disabled>\n        Move to...\n      </option>\n      <option value='currentlyReading'>Currently Reading</option>\n      <option value='wantToRead'>Want to Read</option>\n      <option value='read'>Read</option>\n      <option value='none'>None</option>\n    </select>\n  </div>\n);\n\nShelfChanger.propTypes = {\n  shelf: PropTypes.string.isRequired,\n  book: PropTypes.object.isRequired,\n  changeShelve: PropTypes.func.isRequired\n};\n\nexport default ShelfChanger;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ShelfChanger from \"./shelfChanger\";\n\n/**\n * @description Represents a shelf of books\n * @constructor\n * @param {array} books - this contain the array of books\n * @param {array} shelves - Contain the data about different shelves\n * @param {function} getAllBooks - this function is used to fetch all the books data from server\n * @param {function} changeShelve - this function is used to change the shelve of the book\n */\n\nconst BookShelf = ({ books, shelves, getAllBooks, changeShelve }) =>\n  shelves.map((shelf, index) => (\n    <div className=\"bookshelf\" key={index}>\n      <h2 className=\"bookshelf-title\">{shelf.shelfName}</h2>\n      <div className=\"bookshelf-books\">\n        <ol className=\"books-grid\">\n          {books.map(\n            (book, index) =>\n              book.shelf === shelf.key && (\n                <li key={index}>\n                  <div className=\"book\">\n                    <div className=\"book-top\">\n                      <div\n                        className=\"book-cover\"\n                        style={{\n                          width: 128,\n                          height: 193,\n                          backgroundImage: `url(${book.imageLinks.thumbnail})`\n                        }}\n                      ></div>\n                      <ShelfChanger\n                        book={book}\n                        shelf={book.shelf}\n                        getAllBooks={getAllBooks}\n                        changeShelve={changeShelve}\n                      />\n                    </div>\n                    <div className=\"book-title\">{book.title}</div>\n                    {book.authors.length &&\n                      book.authors.map((author, key) => (\n                        <div className=\"book-authors\" key={key}>\n                          {author}\n                        </div>\n                      ))}\n                  </div>\n                </li>\n              )\n          )}\n        </ol>\n      </div>\n    </div>\n  ));\n\nBookShelf.propTypes = {\n  books: PropTypes.array.isRequired,\n  shelves: PropTypes.array.isRequired,\n  getAllBooks: PropTypes.func.isRequired,\n  changeShelve: PropTypes.func.isRequired\n};\n\nexport default BookShelf;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport BookShelf from \"./bookShelf\";\n\n/**\n * @description Represents a list of book\n * @constructor\n * @param {array} books - this contain the array of books\n * @param {array} shelves - Contain the data about different shelves\n * @param {function} getAllBooks - this function is used to fetch all the books data from server\n * @param {function} changeShelve - this function is used to change the shelve of the book\n */\n\nconst ListBooks = ({ books, shelves, getAllBooks, changeShelve }) => (\n  <div className=\"list-books\">\n    <div className=\"list-books-title\">\n      <h1>MyReads</h1>\n    </div>\n    <div className=\"list-books-content\">\n      <div>\n        <BookShelf\n          books={books}\n          shelves={shelves}\n          getAllBooks={getAllBooks}\n          changeShelve={changeShelve}\n        />\n      </div>\n    </div>\n    <div className=\"open-search\">\n      <Link to=\"/MyReads/search\">\n        <button>Add a book</button>\n      </Link>\n    </div>\n  </div>\n);\n\nListBooks.propTypes = {\n  books: PropTypes.array.isRequired,\n  shelves: PropTypes.array.isRequired,\n  getAllBooks: PropTypes.func.isRequired,\n  changeShelve: PropTypes.func.isRequired\n};\n\nexport default ListBooks;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport ShelfChanger from \"./shelfChanger\";\n\n/**\n * @description Represents the search books page\n * @constructor\n * @param {array} books - this contain the array of books\n * @param {array} searchBookList - Contain the list of search result i.e list of searched books\n * @param {function} searchBook - this function is used to search the book\n * @param {function} getAllBooks - this function is used to fetch all the books data from server\n * @param {function} changeShelve - this function is used to change the shelve of the book\n */\n\nconst SearchBooks = ({\n  searchBookList,\n  searchBook,\n  getAllBooks,\n  books,\n  changeShelve\n}) => (\n  <div className=\"search-books\">\n    <div className=\"search-books-bar\">\n      <Link to=\"/\">\n        <button className=\"close-search\" onClick={() => searchBook(\"\")}>\n          Close\n        </button>\n      </Link>\n      <div className=\"search-books-input-wrapper\">\n        <input\n          type=\"text\"\n          placeholder=\"Search by title or author\"\n          onChange={e => searchBook(e.target.value)}\n          autoFocus\n        />\n      </div>\n    </div>\n    <div className=\"search-books-results\">\n      <ol className=\"books-grid\">\n        {searchBookList.length &&\n          searchBookList.map(book => {\n            let element = books.find(element => element.id === book.id);\n            return (\n              <li key={book.id}>\n                <div className=\"book\">\n                  <div className=\"book-top\">\n                    <div\n                      className=\"book-cover\"\n                      style={{\n                        width: 128,\n                        height: 193,\n                        backgroundImage: `url(${book.imageLinks &&\n                          book.imageLinks.thumbnail})`\n                      }}\n                    ></div>\n                    {element ? (\n                      <ShelfChanger\n                        book={element}\n                        shelf={element.shelf}\n                        getAllBooks={getAllBooks}\n                        changeShelve={changeShelve}\n                      />\n                    ) : (\n                      <ShelfChanger\n                        book={book}\n                        shelf={\"none\"}\n                        getAllBooks={getAllBooks}\n                        changeShelve={changeShelve}\n                      />\n                    )}\n                  </div>\n                  <div className=\"book-title\">{book.title}</div>\n                  {book.authors &&\n                    book.authors.length &&\n                    book.authors.map((author, key) => (\n                      <div className=\"book-authors\" key={key}>\n                        {author}\n                      </div>\n                    ))}\n                </div>\n              </li>\n            );\n          })}\n      </ol>\n    </div>\n  </div>\n);\n\nSearchBooks.propTypes = {\n  searchBookList: PropTypes.array.isRequired,\n  searchBook: PropTypes.func.isRequired,\n  getAllBooks: PropTypes.func.isRequired,\n  books: PropTypes.array.isRequired,\n  changeShelve: PropTypes.func.isRequired\n};\n\nexport default SearchBooks;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport * as BooksAPI from \"../utils/BooksAPI\";\nimport ListBooks from \"./ListBooks\";\nimport SearchBooks from \"./SearchBooks\";\nimport \"../App.css\";\n\nlet shelves = [\n  { key: \"currentlyReading\", shelfName: \"Currently Reading\" },\n  { key: \"wantToRead\", shelfName: \"Want to Read\" },\n  { key: \"read\", shelfName: \"Read\" }\n];\n\n/**\n * @description Represents whole books app\n * @constructor\n */\n\nclass BooksApp extends React.Component {\n  state = {\n    books: [],\n    searchBookList: []\n  };\n\n  componentDidMount() {\n    this.getAllBooks();\n  }\n\n  getAllBooks = async () => {\n    BooksAPI.getAll()\n      .then(books => {\n        this.setState(() => ({\n          books\n        }));\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  };\n\n  searchBook = async query => {\n    if (query !== \"\") {\n      BooksAPI.search(query)\n        .then(searchBookList => {\n          searchBookList.length\n            ? this.setState({ searchBookList })\n            : this.setState({ searchBookList: [] });\n        })\n        .catch(err => {\n          console.error(err);\n        });\n    } else {\n      this.setState({ searchBookList: [] });\n    }\n  };\n\n  changeShelve = book => event => {\n    event.persist();\n    let shelf = event.target.value;\n    BooksAPI.update(book, shelf)\n      .then(() => {\n        book.shelf = shelf;\n        this.setState(prevState =>\n          shelf === \"none\"\n            ? {\n                books: prevState.books.filter(\n                  bookItem => bookItem.id !== book.id\n                )\n              }\n            : {\n                books: prevState.books\n                  .filter(bookItem => bookItem.id !== book.id)\n                  .concat(book)\n              }\n        );\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  };\n\n  render() {\n    const { searchBookList, books } = this.state;\n\n    return (\n      <div className=\"app\">\n        <Route\n          exact\n          path=\"/MyReads/\"\n          render={() => (\n            <ListBooks\n              books={books}\n              getAllBooks={this.getAllBooks}\n              shelves={shelves}\n              changeShelve={this.changeShelve}\n            />\n          )}\n        />\n        <Route\n          path=\"/MyReads/search\"\n          render={() => (\n            <SearchBooks\n              getAllBooks={this.getAllBooks}\n              books={books}\n              searchBook={this.searchBook}\n              searchBookList={searchBookList}\n              changeShelve={this.changeShelve}\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default BooksApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}